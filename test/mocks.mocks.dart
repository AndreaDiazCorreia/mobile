// Mocks generated by Mockito 5.4.6 from annotations
// in mostro_mobile/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dart_nostr/dart_nostr.dart' as _i7;
import 'package:dart_nostr/nostr/model/relay_informations.dart' as _i10;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:mostro_mobile/data/models.dart' as _i6;
import 'package:mostro_mobile/data/repositories/mostro_storage.dart' as _i18;
import 'package:mostro_mobile/data/repositories/open_orders_repository.dart'
    as _i12;
import 'package:mostro_mobile/data/repositories/session_storage.dart' as _i16;
import 'package:mostro_mobile/features/key_manager/key_manager.dart' as _i17;
import 'package:mostro_mobile/features/settings/settings.dart' as _i2;
import 'package:mostro_mobile/services/mostro_service.dart' as _i11;
import 'package:mostro_mobile/services/nostr_service.dart' as _i9;
import 'package:riverpod/src/internals.dart' as _i8;
import 'package:sembast/sembast.dart' as _i5;
import 'package:sembast/src/api/transaction.dart' as _i15;
import 'package:shared_preferences/src/shared_preferences_async.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettings_0 extends _i1.SmartFake implements _i2.Settings {
  _FakeSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRef_1<State extends Object?> extends _i1.SmartFake
    implements _i3.Ref<State> {
  _FakeRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_3 extends _i1.SmartFake implements _i5.Database {
  _FakeDatabase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStoreRef_4<K extends Object?, V extends Object?>
    extends _i1.SmartFake implements _i5.StoreRef<K, V> {
  _FakeStoreRef_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSession_5 extends _i1.SmartFake implements _i6.Session {
  _FakeSession_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilter_6 extends _i1.SmartFake implements _i5.Filter {
  _FakeFilter_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNostrKeyPairs_7 extends _i1.SmartFake implements _i7.NostrKeyPairs {
  _FakeNostrKeyPairs_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMostroMessage_8<T extends _i6.Payload> extends _i1.SmartFake
    implements _i6.MostroMessage<T> {
  _FakeMostroMessage_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderContainer_9 extends _i1.SmartFake
    implements _i3.ProviderContainer {
  _FakeProviderContainer_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeepAliveLink_10 extends _i1.SmartFake implements _i3.KeepAliveLink {
  _FakeKeepAliveLink_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_11<State1> extends _i1.SmartFake
    implements _i3.ProviderSubscription<State1> {
  _FakeProviderSubscription_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNode_12 extends _i1.SmartFake implements _i8.Node {
  _FakeNode_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NostrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNostrService extends _i1.Mock implements _i9.NostrService {
  MockNostrService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.Settings);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  set settings(_i2.Settings? _settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          _settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> init(_i2.Settings? settings) => (super.noSuchMethod(
        Invocation.method(
          #init,
          [settings],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateSettings(_i2.Settings? newSettings) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [newSettings],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i10.RelayInformations?> getRelayInfo(String? relayUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelayInfo,
          [relayUrl],
        ),
        returnValue: _i4.Future<_i10.RelayInformations?>.value(),
      ) as _i4.Future<_i10.RelayInformations?>);

  @override
  _i4.Future<void> publishEvent(_i7.NostrEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #publishEvent,
          [event],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i7.NostrEvent> subscribeToEvents(_i7.NostrRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToEvents,
          [request],
        ),
        returnValue: _i4.Stream<_i7.NostrEvent>.empty(),
      ) as _i4.Stream<_i7.NostrEvent>);

  @override
  _i4.Future<void> disconnectFromRelays() => (super.noSuchMethod(
        Invocation.method(
          #disconnectFromRelays,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void unsubscribe(String? id) => super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MostroService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostroService extends _i1.Mock implements _i11.MostroService {
  MockMostroService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_1<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.Ref<Object?>);

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> submitOrder(_i6.MostroMessage<_i6.Payload>? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitOrder,
          [order],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> takeBuyOrder(
    String? orderId,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeBuyOrder,
          [
            orderId,
            amount,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> takeSellOrder(
    String? orderId,
    int? amount,
    String? lnAddress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeSellOrder,
          [
            orderId,
            amount,
            lnAddress,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendInvoice(
    String? orderId,
    String? invoice,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendInvoice,
          [
            orderId,
            invoice,
            amount,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendFiatSent(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #sendFiatSent,
          [orderId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> releaseOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #releaseOrder,
          [orderId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> disputeOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #disputeOrder,
          [orderId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> submitRating(
    String? orderId,
    int? rating,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitRating,
          [
            orderId,
            rating,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> publishOrder(_i6.MostroMessage<_i6.Payload>? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishOrder,
          [order],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void updateSettings(_i2.Settings? settings) => super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [settings],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OpenOrdersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenOrdersRepository extends _i1.Mock
    implements _i12.OpenOrdersRepository {
  MockOpenOrdersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i7.NostrEvent>> get eventsStream => (super.noSuchMethod(
        Invocation.getter(#eventsStream),
        returnValue: _i4.Stream<List<_i7.NostrEvent>>.empty(),
      ) as _i4.Stream<List<_i7.NostrEvent>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i7.NostrEvent?> getOrderById(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue: _i4.Future<_i7.NostrEvent?>.value(),
      ) as _i4.Future<_i7.NostrEvent?>);

  @override
  _i4.Future<void> addOrder(_i7.NostrEvent? order) => (super.noSuchMethod(
        Invocation.method(
          #addOrder,
          [order],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #deleteOrder,
          [orderId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i7.NostrEvent>> getAllOrders() => (super.noSuchMethod(
        Invocation.method(
          #getAllOrders,
          [],
        ),
        returnValue: _i4.Future<List<_i7.NostrEvent>>.value(<_i7.NostrEvent>[]),
      ) as _i4.Future<List<_i7.NostrEvent>>);

  @override
  _i4.Future<void> updateOrder(_i7.NostrEvent? order) => (super.noSuchMethod(
        Invocation.method(
          #updateOrder,
          [order],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void updateSettings(_i2.Settings? settings) => super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [settings],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reloadData() => super.noSuchMethod(
        Invocation.method(
          #reloadData,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SharedPreferencesAsync].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesAsync extends _i1.Mock
    implements _i13.SharedPreferencesAsync {
  MockSharedPreferencesAsync() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Set<String>> getKeys({Set<String>? allowList}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
          {#allowList: allowList},
        ),
        returnValue: _i4.Future<Set<String>>.value(<String>{}),
      ) as _i4.Future<Set<String>>);

  @override
  _i4.Future<Map<String, Object?>> getAll({Set<String>? allowList}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {#allowList: allowList},
        ),
        returnValue:
            _i4.Future<Map<String, Object?>>.value(<String, Object?>{}),
      ) as _i4.Future<Map<String, Object?>>);

  @override
  _i4.Future<bool?> getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValue: _i4.Future<bool?>.value(),
      ) as _i4.Future<bool?>);

  @override
  _i4.Future<int?> getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);

  @override
  _i4.Future<double?> getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValue: _i4.Future<double?>.value(),
      ) as _i4.Future<double?>);

  @override
  _i4.Future<String?> getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<List<String>?> getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getStringList,
          [key],
        ),
        returnValue: _i4.Future<List<String>?>.value(),
      ) as _i4.Future<List<String>?>);

  @override
  _i4.Future<bool> containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clear({Set<String>? allowList}) => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
          {#allowList: allowList},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i5.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: 0,
      ) as int);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i4.Future<T> transaction<T>(
          _i4.FutureOr<T> Function(_i15.Transaction)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_2<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}

/// A class which mocks [SessionStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionStorage extends _i1.Mock implements _i16.SessionStorage {
  MockSessionStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_3(
          this,
          Invocation.getter(#db),
        ),
      ) as _i5.Database);

  @override
  _i5.StoreRef<String, Map<String, dynamic>> get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeStoreRef_4<String, Map<String, dynamic>>(
          this,
          Invocation.getter(#store),
        ),
      ) as _i5.StoreRef<String, Map<String, dynamic>>);

  @override
  Map<String, dynamic> toDbMap(_i6.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #toDbMap,
          [session],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i6.Session fromDbMap(
    String? key,
    Map<String, dynamic>? jsonMap,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromDbMap,
          [
            key,
            jsonMap,
          ],
        ),
        returnValue: _FakeSession_5(
          this,
          Invocation.method(
            #fromDbMap,
            [
              key,
              jsonMap,
            ],
          ),
        ),
      ) as _i6.Session);

  @override
  _i4.Future<void> putSession(_i6.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #putSession,
          [session],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.Session?> getSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #getSession,
          [sessionId],
        ),
        returnValue: _i4.Future<_i6.Session?>.value(),
      ) as _i4.Future<_i6.Session?>);

  @override
  _i4.Future<List<_i6.Session>> getAllSessions() => (super.noSuchMethod(
        Invocation.method(
          #getAllSessions,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Session>>.value(<_i6.Session>[]),
      ) as _i4.Future<List<_i6.Session>>);

  @override
  _i4.Future<void> deleteSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [sessionId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i6.Session?> watchSession(String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchSession,
          [sessionId],
        ),
        returnValue: _i4.Stream<_i6.Session?>.empty(),
      ) as _i4.Stream<_i6.Session?>);

  @override
  _i4.Stream<List<_i6.Session>> watchAllSessions() => (super.noSuchMethod(
        Invocation.method(
          #watchAllSessions,
          [],
        ),
        returnValue: _i4.Stream<List<_i6.Session>>.empty(),
      ) as _i4.Stream<List<_i6.Session>>);

  @override
  _i4.Future<void> putItem(
    String? id,
    _i6.Session? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putItem,
          [
            id,
            item,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.Session?> getItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValue: _i4.Future<_i6.Session?>.value(),
      ) as _i4.Future<_i6.Session?>);

  @override
  _i4.Future<bool> hasItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #hasItem,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> deleteItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> deleteWhere(_i5.Filter? filter) => (super.noSuchMethod(
        Invocation.method(
          #deleteWhere,
          [filter],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Session>> find({
    _i5.Filter? filter,
    List<_i5.SortOrder<Object?>>? sort,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #find,
          [],
          {
            #filter: filter,
            #sort: sort,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i4.Future<List<_i6.Session>>.value(<_i6.Session>[]),
      ) as _i4.Future<List<_i6.Session>>);

  @override
  _i4.Future<List<_i6.Session>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Session>>.value(<_i6.Session>[]),
      ) as _i4.Future<List<_i6.Session>>);

  @override
  _i4.Stream<List<_i6.Session>> watch({
    _i5.Filter? filter,
    List<_i5.SortOrder<Object?>>? sort,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #filter: filter,
            #sort: sort,
          },
        ),
        returnValue: _i4.Stream<List<_i6.Session>>.empty(),
      ) as _i4.Stream<List<_i6.Session>>);

  @override
  _i4.Stream<_i6.Session?> watchById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #watchById,
          [id],
        ),
        returnValue: _i4.Stream<_i6.Session?>.empty(),
      ) as _i4.Stream<_i6.Session?>);

  @override
  _i5.Filter eq(
    String? field,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #eq,
          [
            field,
            value,
          ],
        ),
        returnValue: _FakeFilter_6(
          this,
          Invocation.method(
            #eq,
            [
              field,
              value,
            ],
          ),
        ),
      ) as _i5.Filter);
}

/// A class which mocks [KeyManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyManager extends _i1.Mock implements _i17.KeyManager {
  MockKeyManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set masterKeyPair(_i7.NostrKeyPairs? _masterKeyPair) => super.noSuchMethod(
        Invocation.setter(
          #masterKeyPair,
          _masterKeyPair,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tradeKeyIndex(int? _tradeKeyIndex) => super.noSuchMethod(
        Invocation.setter(
          #tradeKeyIndex,
          _tradeKeyIndex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasMasterKey() => (super.noSuchMethod(
        Invocation.method(
          #hasMasterKey,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> generateAndStoreMasterKey() => (super.noSuchMethod(
        Invocation.method(
          #generateAndStoreMasterKey,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> generateAndStoreMasterKeyFromMnemonic(String? mnemonic) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateAndStoreMasterKeyFromMnemonic,
          [mnemonic],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> importMnemonic(String? mnemonic) => (super.noSuchMethod(
        Invocation.method(
          #importMnemonic,
          [mnemonic],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getMnemonic() => (super.noSuchMethod(
        Invocation.method(
          #getMnemonic,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<_i7.NostrKeyPairs> deriveTradeKey() => (super.noSuchMethod(
        Invocation.method(
          #deriveTradeKey,
          [],
        ),
        returnValue: _i4.Future<_i7.NostrKeyPairs>.value(_FakeNostrKeyPairs_7(
          this,
          Invocation.method(
            #deriveTradeKey,
            [],
          ),
        )),
      ) as _i4.Future<_i7.NostrKeyPairs>);

  @override
  _i7.NostrKeyPairs deriveTradeKeyPair(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deriveTradeKeyPair,
          [index],
        ),
        returnValue: _FakeNostrKeyPairs_7(
          this,
          Invocation.method(
            #deriveTradeKeyPair,
            [index],
          ),
        ),
      ) as _i7.NostrKeyPairs);

  @override
  _i4.Future<_i7.NostrKeyPairs> deriveTradeKeyFromIndex(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #deriveTradeKeyFromIndex,
          [index],
        ),
        returnValue: _i4.Future<_i7.NostrKeyPairs>.value(_FakeNostrKeyPairs_7(
          this,
          Invocation.method(
            #deriveTradeKeyFromIndex,
            [index],
          ),
        )),
      ) as _i4.Future<_i7.NostrKeyPairs>);

  @override
  _i4.Future<int> getCurrentKeyIndex() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentKeyIndex,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> setCurrentKeyIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #setCurrentKeyIndex,
          [index],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [MostroStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostroStorage extends _i1.Mock implements _i18.MostroStorage {
  MockMostroStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_3(
          this,
          Invocation.getter(#db),
        ),
      ) as _i5.Database);

  @override
  _i5.StoreRef<String, Map<String, dynamic>> get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeStoreRef_4<String, Map<String, dynamic>>(
          this,
          Invocation.getter(#store),
        ),
      ) as _i5.StoreRef<String, Map<String, dynamic>>);

  @override
  _i4.Future<void> addMessage(
    String? key,
    _i6.MostroMessage<_i6.Payload>? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMessage,
          [
            key,
            message,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.MostroMessage<_i6.Payload>>> getAllMessages() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllMessages,
          [],
        ),
        returnValue: _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>.value(
            <_i6.MostroMessage<_i6.Payload>>[]),
      ) as _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i4.Future<void> deleteAllMessages() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllMessages,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAllMessagesByOrderId(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllMessagesByOrderId,
          [orderId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>
      getMessagesOfType<T extends _i6.Payload>() => (super.noSuchMethod(
            Invocation.method(
              #getMessagesOfType,
              [],
            ),
            returnValue: _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>.value(
                <_i6.MostroMessage<_i6.Payload>>[]),
          ) as _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i4.Future<_i6.MostroMessage<_i6.Payload>?>
      getLatestMessageOfTypeById<T extends _i6.Payload>(String? orderId) =>
          (super.noSuchMethod(
            Invocation.method(
              #getLatestMessageOfTypeById,
              [orderId],
            ),
            returnValue: _i4.Future<_i6.MostroMessage<_i6.Payload>?>.value(),
          ) as _i4.Future<_i6.MostroMessage<_i6.Payload>?>);

  @override
  _i4.Future<List<_i6.MostroMessage<_i6.Payload>>> getMessagesForId(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessagesForId,
          [orderId],
        ),
        returnValue: _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>.value(
            <_i6.MostroMessage<_i6.Payload>>[]),
      ) as _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i6.MostroMessage<_i6.Payload> fromDbMap(
    String? key,
    Map<String, dynamic>? jsonMap,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromDbMap,
          [
            key,
            jsonMap,
          ],
        ),
        returnValue: _FakeMostroMessage_8<_i6.Payload>(
          this,
          Invocation.method(
            #fromDbMap,
            [
              key,
              jsonMap,
            ],
          ),
        ),
      ) as _i6.MostroMessage<_i6.Payload>);

  @override
  Map<String, dynamic> toDbMap(_i6.MostroMessage<_i6.Payload>? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDbMap,
          [item],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Future<bool> hasMessageByKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #hasMessageByKey,
          [key],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i6.MostroMessage<_i6.Payload>?> getLatestMessageById(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestMessageById,
          [orderId],
        ),
        returnValue: _i4.Future<_i6.MostroMessage<_i6.Payload>?>.value(),
      ) as _i4.Future<_i6.MostroMessage<_i6.Payload>?>);

  @override
  _i4.Stream<_i6.MostroMessage<_i6.Payload>?> watchLatestMessage(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLatestMessage,
          [orderId],
        ),
        returnValue: _i4.Stream<_i6.MostroMessage<_i6.Payload>?>.empty(),
      ) as _i4.Stream<_i6.MostroMessage<_i6.Payload>?>);

  @override
  _i4.Stream<_i6.MostroMessage<_i6.Payload>?> watchLatestMessageOfType<T>(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLatestMessageOfType,
          [orderId],
        ),
        returnValue: _i4.Stream<_i6.MostroMessage<_i6.Payload>?>.empty(),
      ) as _i4.Stream<_i6.MostroMessage<_i6.Payload>?>);

  @override
  _i4.Stream<List<_i6.MostroMessage<_i6.Payload>>> watchAllMessages(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllMessages,
          [orderId],
        ),
        returnValue: _i4.Stream<List<_i6.MostroMessage<_i6.Payload>>>.empty(),
      ) as _i4.Stream<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i4.Stream<_i6.MostroMessage<_i6.Payload>?> watchByRequestId(
          int? requestId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchByRequestId,
          [requestId],
        ),
        returnValue: _i4.Stream<_i6.MostroMessage<_i6.Payload>?>.empty(),
      ) as _i4.Stream<_i6.MostroMessage<_i6.Payload>?>);

  @override
  _i4.Future<List<_i6.MostroMessage<_i6.Payload>>> getAllMessagesForOrderId(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllMessagesForOrderId,
          [orderId],
        ),
        returnValue: _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>.value(
            <_i6.MostroMessage<_i6.Payload>>[]),
      ) as _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i4.Future<void> putItem(
    String? id,
    _i6.MostroMessage<_i6.Payload>? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putItem,
          [
            id,
            item,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.MostroMessage<_i6.Payload>?> getItem(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValue: _i4.Future<_i6.MostroMessage<_i6.Payload>?>.value(),
      ) as _i4.Future<_i6.MostroMessage<_i6.Payload>?>);

  @override
  _i4.Future<bool> hasItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #hasItem,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> deleteItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> deleteWhere(_i5.Filter? filter) => (super.noSuchMethod(
        Invocation.method(
          #deleteWhere,
          [filter],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.MostroMessage<_i6.Payload>>> find({
    _i5.Filter? filter,
    List<_i5.SortOrder<Object?>>? sort,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #find,
          [],
          {
            #filter: filter,
            #sort: sort,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>.value(
            <_i6.MostroMessage<_i6.Payload>>[]),
      ) as _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i4.Future<List<_i6.MostroMessage<_i6.Payload>>> getAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>.value(
            <_i6.MostroMessage<_i6.Payload>>[]),
      ) as _i4.Future<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i4.Stream<List<_i6.MostroMessage<_i6.Payload>>> watch({
    _i5.Filter? filter,
    List<_i5.SortOrder<Object?>>? sort,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #filter: filter,
            #sort: sort,
          },
        ),
        returnValue: _i4.Stream<List<_i6.MostroMessage<_i6.Payload>>>.empty(),
      ) as _i4.Stream<List<_i6.MostroMessage<_i6.Payload>>>);

  @override
  _i4.Stream<_i6.MostroMessage<_i6.Payload>?> watchById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchById,
          [id],
        ),
        returnValue: _i4.Stream<_i6.MostroMessage<_i6.Payload>?>.empty(),
      ) as _i4.Stream<_i6.MostroMessage<_i6.Payload>?>);

  @override
  _i5.Filter eq(
    String? field,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #eq,
          [
            field,
            value,
          ],
        ),
        returnValue: _FakeFilter_6(
          this,
          Invocation.method(
            #eq,
            [
              field,
              value,
            ],
          ),
        ),
      ) as _i5.Filter);
}

/// A class which mocks [Settings].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettings extends _i1.Mock implements _i2.Settings {
  MockSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get fullPrivacyMode => (super.noSuchMethod(
        Invocation.getter(#fullPrivacyMode),
        returnValue: false,
      ) as bool);

  @override
  List<String> get relays => (super.noSuchMethod(
        Invocation.getter(#relays),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get mostroPublicKey => (super.noSuchMethod(
        Invocation.getter(#mostroPublicKey),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#mostroPublicKey),
        ),
      ) as String);

  @override
  _i2.Settings copyWith({
    List<String>? relays,
    bool? privacyModeSetting,
    String? mostroInstance,
    String? defaultFiatCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #relays: relays,
            #privacyModeSetting: privacyModeSetting,
            #mostroInstance: mostroInstance,
            #defaultFiatCode: defaultFiatCode,
          },
        ),
        returnValue: _FakeSettings_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #relays: relays,
              #privacyModeSetting: privacyModeSetting,
              #mostroInstance: mostroInstance,
              #defaultFiatCode: defaultFiatCode,
            },
          ),
        ),
      ) as _i2.Settings);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i3.Ref<State> {
  MockRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_9(
          this,
          Invocation.getter(#container),
        ),
      ) as _i3.ProviderContainer);

  @override
  T refresh<T>(_i3.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);

  @override
  void invalidate(_i3.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T read<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);

  @override
  bool exists(_i3.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  T watch<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);

  @override
  _i3.KeepAliveLink keepAlive() => (super.noSuchMethod(
        Invocation.method(
          #keepAlive,
          [],
        ),
        returnValue: _FakeKeepAliveLink_10(
          this,
          Invocation.method(
            #keepAlive,
            [],
          ),
        ),
      ) as _i3.KeepAliveLink);

  @override
  _i3.ProviderSubscription<T> listen<T>(
    _i3.ProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_11<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i3.ProviderSubscription<T>);
}

/// A class which mocks [ProviderSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockProviderSubscription<State> extends _i1.Mock
    implements _i3.ProviderSubscription<State> {
  MockProviderSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Node get source => (super.noSuchMethod(
        Invocation.getter(#source),
        returnValue: _FakeNode_12(
          this,
          Invocation.getter(#source),
        ),
      ) as _i8.Node);

  @override
  bool get closed => (super.noSuchMethod(
        Invocation.getter(#closed),
        returnValue: false,
      ) as bool);

  @override
  State read() => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
        ),
        returnValue: _i14.dummyValue<State>(
          this,
          Invocation.method(
            #read,
            [],
          ),
        ),
      ) as State);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
