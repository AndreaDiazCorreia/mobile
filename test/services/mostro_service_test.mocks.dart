// Mocks generated by Mockito 5.4.6 from annotations
// in mostro_mobile/test/services/mostro_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dart_nostr/dart_nostr.dart' as _i8;
import 'package:dart_nostr/nostr/model/relay_informations.dart' as _i7;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:mostro_mobile/data/models/enums/role.dart' as _i10;
import 'package:mostro_mobile/data/models/session.dart' as _i4;
import 'package:mostro_mobile/features/settings/settings.dart' as _i2;
import 'package:mostro_mobile/services/nostr_service.dart' as _i5;
import 'package:mostro_mobile/shared/notifiers/session_notifier.dart' as _i9;
import 'package:state_notifier/state_notifier.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettings_0 extends _i1.SmartFake implements _i2.Settings {
  _FakeSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRef_1<State extends Object?> extends _i1.SmartFake
    implements _i3.Ref<State> {
  _FakeRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSession_2 extends _i1.SmartFake implements _i4.Session {
  _FakeSession_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderContainer_3 extends _i1.SmartFake
    implements _i3.ProviderContainer {
  _FakeProviderContainer_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeepAliveLink_4 extends _i1.SmartFake implements _i3.KeepAliveLink {
  _FakeKeepAliveLink_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_5<State1> extends _i1.SmartFake
    implements _i3.ProviderSubscription<State1> {
  _FakeProviderSubscription_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NostrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNostrService extends _i1.Mock implements _i5.NostrService {
  MockNostrService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.Settings);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  set settings(_i2.Settings? _settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          _settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> init(_i2.Settings? settings) => (super.noSuchMethod(
        Invocation.method(
          #init,
          [settings],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateSettings(_i2.Settings? newSettings) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [newSettings],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.RelayInformations?> getRelayInfo(String? relayUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelayInfo,
          [relayUrl],
        ),
        returnValue: _i6.Future<_i7.RelayInformations?>.value(),
      ) as _i6.Future<_i7.RelayInformations?>);

  @override
  _i6.Future<void> publishEvent(_i8.NostrEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #publishEvent,
          [event],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Stream<_i8.NostrEvent> subscribeToEvents(_i8.NostrRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToEvents,
          [request],
        ),
        returnValue: _i6.Stream<_i8.NostrEvent>.empty(),
      ) as _i6.Stream<_i8.NostrEvent>);

  @override
  _i6.Future<void> disconnectFromRelays() => (super.noSuchMethod(
        Invocation.method(
          #disconnectFromRelays,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void unsubscribe(String? id) => super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SessionNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionNotifier extends _i1.Mock implements _i9.SessionNotifier {
  MockSessionNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_1<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.Ref<Object?>);

  @override
  List<_i4.Session> get sessions => (super.noSuchMethod(
        Invocation.getter(#sessions),
        returnValue: <_i4.Session>[],
      ) as List<_i4.Session>);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i6.Stream<List<_i4.Session>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<List<_i4.Session>>.empty(),
      ) as _i6.Stream<List<_i4.Session>>);

  @override
  List<_i4.Session> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i4.Session>[],
      ) as List<_i4.Session>);

  @override
  List<_i4.Session> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: <_i4.Session>[],
      ) as List<_i4.Session>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set state(List<_i4.Session>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void updateSettings(_i2.Settings? settings) => super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [settings],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.Session> newSession({
    String? orderId,
    int? requestId,
    _i10.Role? role,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #newSession,
          [],
          {
            #orderId: orderId,
            #requestId: requestId,
            #role: role,
          },
        ),
        returnValue: _i6.Future<_i4.Session>.value(_FakeSession_2(
          this,
          Invocation.method(
            #newSession,
            [],
            {
              #orderId: orderId,
              #requestId: requestId,
              #role: role,
            },
          ),
        )),
      ) as _i6.Future<_i4.Session>);

  @override
  _i6.Future<void> saveSession(_i4.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [session],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateSession(
    String? orderId,
    void Function(_i4.Session)? update,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [
            orderId,
            update,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i4.Session? getSessionByRequestId(int? requestId) =>
      (super.noSuchMethod(Invocation.method(
        #getSessionByRequestId,
        [requestId],
      )) as _i4.Session?);

  @override
  _i4.Session? getSessionByOrderId(String? orderId) =>
      (super.noSuchMethod(Invocation.method(
        #getSessionByOrderId,
        [orderId],
      )) as _i4.Session?);

  @override
  _i4.Session? getSessionByTradeKey(String? tradeKey) =>
      (super.noSuchMethod(Invocation.method(
        #getSessionByTradeKey,
        [tradeKey],
      )) as _i4.Session?);

  @override
  _i6.Future<_i4.Session?> loadSession(int? keyIndex) => (super.noSuchMethod(
        Invocation.method(
          #loadSession,
          [keyIndex],
        ),
        returnValue: _i6.Future<_i4.Session?>.value(),
      ) as _i6.Future<_i4.Session?>);

  @override
  _i6.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [sessionId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    List<_i4.Session>? old,
    List<_i4.Session>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.RemoveListener addListener(
    _i11.Listener<List<_i4.Session>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i3.RemoveListener);
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i3.Ref<State> {
  MockRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_3(
          this,
          Invocation.getter(#container),
        ),
      ) as _i3.ProviderContainer);

  @override
  T refresh<T>(_i3.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i12.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);

  @override
  void invalidate(_i3.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T read<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i12.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);

  @override
  bool exists(_i3.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  T watch<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i12.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);

  @override
  _i3.KeepAliveLink keepAlive() => (super.noSuchMethod(
        Invocation.method(
          #keepAlive,
          [],
        ),
        returnValue: _FakeKeepAliveLink_4(
          this,
          Invocation.method(
            #keepAlive,
            [],
          ),
        ),
      ) as _i3.KeepAliveLink);

  @override
  _i3.ProviderSubscription<T> listen<T>(
    _i3.ProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_5<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i3.ProviderSubscription<T>);
}
